name: 每日定时选股

on:
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  
  # 定时触发
  schedule:
    # CRON 表达式，代表在 UTC 时间的周一至周五执行。
    # 北京时间 (UTC+8) 对应关系：
    # 9:35 (北京时间) = 1:35 (UTC)
    # 12:00 (北京时间) = 4:00 (UTC)  
    # 16:00 (北京时间) = 8:00 (UTC)
    - cron: '35 1 * * 1-5'   # 9:35 (北京时间)
    - cron: '0 4 * * 1-5'    # 12:00 (北京时间)
    - cron: '0 8 * * 1-5'    # 16:00 (北京时间)

jobs:
  run-scheduled-selection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义策略矩阵，这两个任务将会并行执行
        strategy: [technical, comprehensive]
      fail-fast: false # 即使一个策略失败，其他策略也继续运行

    steps:
      # 第一步：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 升级到更新、更快的Python版本

      # 缓存pip依赖，加速后续运行
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 第三步：安装 Python 依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第四步：根据矩阵中的策略名称运行选股脚本
      - name: Run stock selection for ${{ matrix.strategy }}
        run: python main.py select --strategy ${{ matrix.strategy }}

      # 第五步：发送邮件通知
      - name: Send email notification for ${{ matrix.strategy }}
        if: success() && matrix.strategy == 'comprehensive' # 只对综合策略发送邮件，避免重复
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
        run: |
          # 创建临时的邮件配置文件
          cat > user_config.py << EOF
          EMAIL_CONFIG = {
              'enabled': True,
              'smtp_server': 'smtp.qq.com',
              'smtp_port': 465,  # 使用SSL端口465
              'username': '${{ secrets.EMAIL_USERNAME }}',
              'password': '${{ secrets.EMAIL_PASSWORD }}',
              'to_email': '${{ secrets.EMAIL_TO }}',
              'use_tls': False,  # SSL模式下不使用TLS
              'subject_template': '📈 每日选股推荐 - {date}'
          }
          EOF
          
          # 发送邮件通知
          python send_email_notification.py ${{ matrix.strategy }}

  # 单独创建一个job来处理提交，确保所有策略都运行完毕后再提交
  commit-results:
    needs: run-scheduled-selection # 依赖于选股任务
    runs-on: ubuntu-latest
    # 仅在主分支的定时任务或手动触发时执行
    if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Commit and push results
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(auto): 更新每日选股结果"
          file_pattern: 'results/*.json'
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com 