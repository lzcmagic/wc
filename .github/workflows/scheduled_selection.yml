name: 每日定时选股

on:
  # 代码推送时自动触发（仅限主分支）
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'results/**'  # 忽略结果文件的推送，避免循环触发
      - 'README.md'
      - 'docs/**'
  
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  
  # 定时触发
  schedule:
    # CRON 表达式，代表在 UTC 时间的周一至周五执行。
    # 北京时间 (UTC+8) 对应关系：
    # 9:35 (北京时间) = 1:35 (UTC)
    # 12:00 (北京时间) = 4:00 (UTC)  
    # 16:00 (北京时间) = 8:00 (UTC)
    - cron: '10 1 * * 1-5'   # 9:35 (北京时间)
    - cron: '0 4 * * 1-5'    # 12:00 (北京时间)
    - cron: '10 6 * * 1-5'    # 16:00 (北京时间)

jobs:
  run-scheduled-selection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义策略矩阵，这两个任务将会并行执行
        strategy: [technical, comprehensive]
      fail-fast: false # 即使一个策略失败，其他策略也继续运行

    steps:
      # 第一步：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 升级到更新、更快的Python版本

      # 缓存pip依赖，加速后续运行
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 第三步：安装 Python 依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第四步：根据矩阵中的策略名称运行选股脚本
      - name: Run stock selection for ${{ matrix.strategy }}
        timeout-minutes: 60  # 设置60分钟超时
        run: |
          # 直接运行核心的选股脚本
          echo "🚀 开始运行选股策略..."
          python main.py select --strategy ${{ matrix.strategy }}
          
          # 检查结果文件
          echo "📊 检查结果文件..."
          ls -la results/ || echo "⚠️ results目录不存在"

      # 第五步：发送微信推送通知
      - name: Send WxPusher notification for ${{ matrix.strategy }}
        if: success() # 只要任务成功就发送推送
        timeout-minutes: 5  # 推送发送超时5分钟
        run: |
          # 发送微信推送通知
          echo "📱 开始发送微信推送通知..."
          python send_wxpush_notification.py ${{ matrix.strategy }}

      # 第六步：上传结果文件
      - name: Upload results for ${{ matrix.strategy }}
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.strategy }}
          path: results/
          retention-days: 7 
