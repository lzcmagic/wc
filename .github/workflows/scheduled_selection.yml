name: 每日定时选股

on:
  # 代码推送时自动触发（仅限主分支）
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'results/**'  # 忽略结果文件的推送，避免循环触发
      - 'README.md'
      - 'docs/**'
  
  # 允许在 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:
  
  # 定时触发
  schedule:
    # CRON 表达式，代表在 UTC 时间的周一至周五执行。
    # 北京时间 (UTC+8) 对应关系：
    # 9:35 (北京时间) = 1:35 (UTC)
    # 12:00 (北京时间) = 4:00 (UTC)  
    # 16:00 (北京时间) = 8:00 (UTC)
    - cron: '35 1 * * 1-5'   # 9:35 (北京时间)
    - cron: '0 4 * * 1-5'    # 12:00 (北京时间)
    - cron: '0 8 * * 1-5'    # 16:00 (北京时间)

jobs:
  run-scheduled-selection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义策略矩阵，这两个任务将会并行执行
        strategy: [technical, comprehensive]
      fail-fast: false # 即使一个策略失败，其他策略也继续运行

    steps:
      # 第一步：检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 升级到更新、更快的Python版本

      # 缓存pip依赖，加速后续运行
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 第三步：安装 Python 依赖
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第四步：根据矩阵中的策略名称运行选股脚本
      - name: Run stock selection for ${{ matrix.strategy }}
        timeout-minutes: 30  # 设置30分钟超时
        run: |
          # 调试：检查策略配置
          python -c "from core.config import get_strategy_config; config = get_strategy_config('${{ matrix.strategy }}'); print('Config keys:', list(config.keys())); print('analysis_period:', config.get('analysis_period', 'NOT_FOUND'))"
          
          # 网络诊断
          echo "🔍 网络诊断..."
          ping -c 3 baidu.com || echo "⚠️ 网络连接不稳定"
          
          # 检查Python环境
          echo "🔍 检查Python环境..."
          python -c "import akshare as ak; print('✅ akshare导入成功')"
          
          # 测试数据获取（增加更多重试）
          echo "🔍 测试数据获取..."
          python -c "
          import akshare as ak
          import time
          for i in range(5):
              try:
                  df = ak.stock_zh_a_spot_em()
                  if not df.empty:
                      print(f'✅ 第{i+1}次尝试成功，获取 {len(df)} 只股票数据')
                      break
                  else:
                      print(f'⚠️ 第{i+1}次尝试返回空数据')
              except Exception as e:
                  print(f'❌ 第{i+1}次尝试失败: {e}')
              if i < 4:
                  time.sleep(5)
          else:
              print('❌ 所有测试尝试都失败了')
          "
          
          # 运行选股（如果网络测试通过）
          echo "🚀 开始运行选股策略..."
          python main.py select --strategy ${{ matrix.strategy }} || echo "❌ 选股失败，可能是网络问题"
          
          # 检查结果文件
          echo "📊 检查结果文件..."
          ls -la results/ || echo "⚠️ results目录不存在"

      # 第五步：发送邮件通知
      - name: Send email notification for ${{ matrix.strategy }}
        if: success() && matrix.strategy == 'comprehensive' # 只对综合策略发送邮件，避免重复
        timeout-minutes: 5  # 邮件发送超时5分钟
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
        run: |
          # 检查邮件配置
          echo "📧 检查邮件配置..."
          if [ -z "$EMAIL_USERNAME" ] || [ -z "$EMAIL_PASSWORD" ] || [ -z "$EMAIL_TO" ]; then
            echo "❌ 邮件配置不完整，跳过邮件发送"
            exit 0
          fi
          
          # 创建临时的配置文件，包含邮件和策略配置
          cat > user_config.py << EOF
          USER_CONFIG = {
              'EMAIL_CONFIG': {
                  'enabled': True,
                  'smtp_server': 'smtp.qq.com',
                  'smtp_port': 465,  # 使用SSL端口465
                  'username': '${{ secrets.EMAIL_USERNAME }}',
                  'password': '${{ secrets.EMAIL_PASSWORD }}',
                  'to_email': '${{ secrets.EMAIL_TO }}',
                  'use_tls': False,  # SSL模式下不使用TLS
                  'subject_template': '📈 每日选股推荐 - {date}'
              },
              'COMPREHENSIVE_STRATEGY_CONFIG': {
                  'analysis_period': 90,
                  'min_market_cap': 8000000000,
                  'max_recent_gain': 25,
                  'min_score': 75,
                  'max_stocks': 8
              }
          }
          EOF
          
          # 发送邮件通知
          echo "📧 开始发送邮件通知..."
          python send_email_notification.py ${{ matrix.strategy }}

      # 第六步：上传结果文件
      - name: Upload results for ${{ matrix.strategy }}
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.strategy }}
          path: results/
          retention-days: 7

  # 单独创建一个job来处理提交，确保所有策略都运行完毕后再提交
  commit-results:
    needs: run-scheduled-selection # 依赖于选股任务
    runs-on: ubuntu-latest
    # 在定时任务、手动触发或push事件时执行
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 下载所有策略的结果文件
      - name: Download all results
        uses: actions/download-artifact@v4
        with:
          path: results/

      # 检查结果文件
      - name: Check results files
        run: |
          echo "📊 检查结果文件..."
          ls -la results/ || echo "⚠️ results目录不存在"
          find . -name "*.json" -type f || echo "⚠️ 未找到JSON文件"

      # 提交结果文件
      - name: Commit and push results
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(auto): 更新每日选股结果 - $(date +'%Y-%m-%d %H:%M')"
          file_pattern: 'results/*.json'
          commit_user_name: GitHub Actions Bot
          commit_user_email: actions@github.com 